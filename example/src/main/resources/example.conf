affinity {

  cluster {
    num.partitions = 4
    coordinator {
      class = "io.amient.affinity.core.cluster.CoordinatorZk"
      zookeeper.connect = "localhost:2181"
      zookeeper.timeout.connect.ms = 6000
      zookeeper.timeout.session.ms = 30000
      zookeeper.root = "/affinity"
    }
  }

  node {
    name = "ExampleSystem"

    region {}

    gateway {
      http {
        host = "127.0.0.1"
      }
    }
  }

  state.settings {
    memstore.class = "io.amient.affinity.core.storage.MemStoreConcurrentMap"
    storage {
      class = "io.amient.affinity.core.storage.kafka.KafkaStorage"
      kafka {
        bootstrap.servers = "localhost:9092"
        topic = "settings"
        producer {
          acks = "all"
          retries = 0
          linger.ms = 0
        }
      }
    }
  }

  state.graph {
    memstore.class = "io.amient.affinity.core.storage.MemStoreSimpleMap"
    storage {
      class = "io.amient.affinity.core.storage.kafka.KafkaStorage"
      kafka {
        bootstrap.servers = "localhost:9092"
        topic = "graph"
        producer {
          acks = "all"
          retries = 0
          linger.ms = 0
        }
      }
    }
  }

  state.cache {
    memstore.class = "io.amient.affinity.core.storage.MemStoreConcurrentMap"
    storage.class = "io.amient.affinity.core.storage.NoopStorage"
  }

}

akka.loglevel = "INFO"

akka.remote {
  log-remote-lifecycle-events = off
  enabled-transports = ["akka.remote.netty.tcp"]
  netty.tcp {
    hostname = "127.0.0.1"
    port = 0
  }
}

akka.actor {

  provider = "akka.remote.RemoteActorRefProvider"

  serializers {
    java = "akka.serialization.JavaSerializer"
    proto = "akka.remote.serialization.ProtobufSerializer"
    string = "io.amient.affinity.core.serde.primitive.StringSerde"
    int = "io.amient.affinity.core.serde.primitive.IntSerde"
    avro = "io.amient.affinity.example.MyAvroSerde"
  }

  serialization-bindings {
    "java.io.Serializable" = java
    "java.lang.String" = string
    "java.lang.Integer" = int
    "com.google.protobuf.Message" = proto
    "io.amient.affinity.core.serde.avro.AvroRecord" = avro
  }
}

