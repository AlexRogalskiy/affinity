akka {

  remote {
    log-remote-lifecycle-events = off
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
    }
  }

  actor {
    provider = "akka.remote.RemoteActorRefProvider"
  }

}

affinity {

  node {}

  avro {
    schema.provider.class = "io.amient.affinity.avro.schema.ZkAvroSchemaRegistry"
    schema.registry.zookeeper {
      connect = "localhost:2181"
      timeout.connect.ms = 20000
      timeout.session.ms = 30000
      root = "/affinity-schema-registry"
    }
  }

  coordinator {
    class = "io.amient.affinity.core.cluster.CoordinatorZk"
    zookeeper {
      connect = "localhost:2181"
      timeout.connect.ms = 6000
      timeout.session.ms = 30000
      root = "/affinity"
    }
  }

  broadcast {
    settings {
      memstore.class = "io.amient.affinity.core.storage.MemStoreSimpleMap"
      storage {
        class = "io.amient.affinity.core.storage.kafka.KafkaStorage"
        kafka {
          bootstrap.servers = "localhost:9092"
          topic = "settings"
          consumer {}
          producer {
            acks = "all"
            retries = 0
            linger.ms = 0
          }
        }
      }
    }
  }

  keyspace {
    graph {
      num.partitions = 4
      class = "io.amient.affinity.example.graph.GraphPartition"
      state.graph {
        memstore.class = "io.amient.affinity.core.storage.MemStoreSimpleMap"
        storage {
          class = "io.amient.affinity.core.storage.kafka.KafkaStorage"
          kafka {
            bootstrap.servers = "localhost:9092"
            topic = "graph"
            consumer {}
            producer {
              acks = "all"
              retries = 0
              linger.ms = 0
            }
          }
        }
      }
      state.components {
        memstore.class = "io.amient.affinity.core.storage.MemStoreSimpleMap"
        storage {
          class = "io.amient.affinity.core.storage.kafka.KafkaStorage"
          kafka {
            bootstrap.servers = "localhost:9092"
            topic = "components"
            consumer {}
            producer {
              acks = "all"
              retries = 0
              linger.ms = 0
            }
          }
        }
      }
    }
  }

}
